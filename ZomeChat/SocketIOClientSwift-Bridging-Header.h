// Generated by Apple Swift version 1.2 (swiftlang-602.0.53.1 clang-602.0.53)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if defined(__has_include) && __has_include(<uchar.h>)
# include <uchar.h>
#elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
#endif

typedef struct _NSZone NSZone;

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
#endif
#if __has_feature(nullability)
#  define SWIFT_NULLABILITY(X) X
#else
# if !defined(__nonnull)
#  define __nonnull
# endif
# if !defined(__nullable)
#  define __nullable
# endif
# if !defined(__null_unspecified)
#  define __null_unspecified
# endif
#  define SWIFT_NULLABILITY(X)
#endif
#if defined(__has_feature) && __has_feature(modules)
@import ObjectiveC;
@import Dispatch;
@import Foundation;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
@class NSArray;

SWIFT_CLASS("_TtC8ZomeChat14SocketAnyEvent")
@interface SocketAnyEvent
@property (nonatomic, readonly, copy) NSString * __null_unspecified event;
@property (nonatomic, readonly) NSArray * __nullable items;
@end

@protocol SocketEngineClient;
@protocol NSURLSessionDelegate;
@class NSDictionary;
@class WebSocket;
@class NSError;
@class NSData;

SWIFT_CLASS("_TtC8ZomeChat12SocketEngine")
@interface SocketEngine : NSObject
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithClient:(id <SocketEngineClient> __nonnull)client sessionDelegate:(id <NSURLSessionDelegate> __nullable)sessionDelegate OBJC_DESIGNATED_INITIALIZER;
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithClient:(id <SocketEngineClient> __nonnull)client opts:(NSDictionary * __nullable)opts;
- (void)closeWithFast:(BOOL)fast;
- (void)openWithOpts:(NSDictionary * __nullable)opts;

/// Write a message, independent of transport. For Objective-C. withData should be an NSArray of NSData
- (void)writeObjc:(NSString * __nonnull)msg withType:(NSInteger)type withData:(NSArray * __nullable)data;
- (void)websocketDidConnect:(WebSocket * __nonnull)socket;
- (void)websocketDidDisconnect:(WebSocket * __nonnull)socket error:(NSError * __nullable)error;
- (void)websocketDidReceiveMessage:(WebSocket * __nonnull)socket text:(NSString * __nonnull)text;
- (void)websocketDidReceiveData:(WebSocket * __nonnull)socket data:(NSData * __nonnull)data;
@end


SWIFT_PROTOCOL("_TtP8ZomeChat18SocketEngineClient_")
@protocol SocketEngineClient
@property (nonatomic, readonly) dispatch_queue_attr_t __null_unspecified handleQueue;
@property (nonatomic, readonly, copy) NSString * __nonnull socketURL;
@property (nonatomic, readonly) BOOL secure;
- (void)didError:(id __nonnull)reason;
- (void)engineDidClose:(NSString * __nonnull)reason;
- (void)parseSocketMessage:(NSString * __nonnull)msg;
- (void)parseBinaryData:(NSData * __nonnull)data;
@end


SWIFT_CLASS("_TtC8ZomeChat14SocketIOClient")
@interface SocketIOClient : NSObject <SocketEngineClient>
@property (nonatomic, readonly, copy) NSString * __nonnull socketURL;
@property (nonatomic, readonly) dispatch_queue_attr_t __null_unspecified handleAckQueue;
@property (nonatomic, readonly) dispatch_queue_attr_t __null_unspecified handleQueue;
@property (nonatomic, readonly) dispatch_queue_attr_t __null_unspecified emitQueue;
@property (nonatomic, readonly) BOOL closed;
@property (nonatomic, readonly) BOOL connected;
@property (nonatomic, readonly) BOOL connecting;
@property (nonatomic) SocketEngine * __nullable engine;
@property (nonatomic, copy) NSString * __nonnull nsp;
@property (nonatomic, copy) NSDictionary * __nullable opts;
@property (nonatomic) BOOL reconnects;
@property (nonatomic, readonly) BOOL reconnecting;
@property (nonatomic) NSInteger reconnectWait;
@property (nonatomic, readonly) BOOL secure;
@property (nonatomic, readonly, copy) NSString * __nullable sid;
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithSocketURL:(NSString * __nonnull)socketURL options:(NSDictionary * __nullable)options;

/// Closes the socket. Only reopen the same socket if you know what you're doing.
/// Will turn off automatic reconnects.
/// Pass true to fast if you're closing from a background task
- (void)closeWithFast:(BOOL)fast;

/// Connect to the server.
- (void)connect;

/// Connect to the server. If we aren't connected after timeoutAfter, call handler
- (void)connectWithTimeoutAfter:(NSInteger)timeoutAfter withTimeoutHandler:(void (^ __nullable)(void))handler;

/// error
- (void)didError:(id __nonnull)reason;

/// Same as close
- (void)disconnectWithFast:(BOOL)fast;

/// Same as emit, but meant for Objective-C
- (void)emit:(NSString * __nonnull)event withItems:(NSArray * __nonnull)items;

/// Same as emitWithAck, but for Objective-C
- (void (^ __nonnull)(uint64_t, void (^ __nonnull)(NSArray * __nullable)))emitWithAck:(NSString * __nonnull)event withItems:(NSArray * __nonnull)items;
- (void)engineDidClose:(NSString * __nonnull)reason;

/// Leaves nsp and goes back to /
- (void)leaveNamespace;

/// Joins nsp if it is not /
- (void)joinNamespace;

/// Removes handler(s)
- (void)off:(NSString * __nonnull)event;

/// Adds a handler for an event.
- (void)on:(NSString * __nonnull)event callback:(void (^ __nonnull)(NSArray * __nullable, void (^ __nullable)(NSArray * __nonnull)))callback;

/// Removes all handlers.
/// Can be used after disconnecting to break any potential remaining retain cycles.
- (void)removeAllHandlers;

/// Adds a handler that will be called on every event.
- (void)onAny:(void (^ __nonnull)(SocketAnyEvent * __nonnull))handler;

/// Same as connect
- (void)open;
- (void)parseSocketMessage:(NSString * __nonnull)msg;
- (void)parseBinaryData:(NSData * __nonnull)data;

/// Trieds to reconnect to the server.
- (void)reconnect;
@end


SWIFT_CLASS("_TtC8ZomeChat10SwiftRegex")
@interface SwiftRegex : NSObject
- (BOOL)doesMatchWithOptions:(NSMatchingOptions)options;
- (NSRange)rangeWithOptions:(NSMatchingOptions)options;
- (NSString * __nullable)matchWithOptions:(NSMatchingOptions)options;
- (NSArray * __nullable)groupsWithOptions:(NSMatchingOptions)options;
- (NSString * __nullable)objectAtIndexedSubscript:(NSInteger)groupno;
- (void)setObject:(NSString * __nullable)newValue atIndexedSubscript:(NSInteger)groupno;
- (NSArray * __nonnull)rangesWithOptions:(NSMatchingOptions)options;
- (NSArray * __nonnull)matchesWithOptions:(NSMatchingOptions)options;
- (NSDictionary * __nonnull)dictionaryWithOptions:(NSMatchingOptions)options;
@property (nonatomic, readonly) BOOL boolValue;
@end

@class NSURL;
@class NSHTTPCookie;
@class NSStream;

SWIFT_CLASS("_TtC8ZomeChat9WebSocket")
@interface WebSocket : NSObject <NSStreamDelegate>
@property (nonatomic) dispatch_queue_t __null_unspecified queue;
@property (nonatomic, copy) void (^ __nullable onConnect)(void);
@property (nonatomic, copy) void (^ __nullable onDisconnect)(NSError * __nullable);
@property (nonatomic, copy) void (^ __nullable onText)(NSString * __nonnull);
@property (nonatomic, copy) void (^ __nullable onData)(NSData * __nonnull);
@property (nonatomic, copy) void (^ __nullable onPong)(void);
@property (nonatomic, copy) NSDictionary * __nonnull headers;
@property (nonatomic) BOOL voipEnabled;
@property (nonatomic) BOOL selfSignedSSL;
@property (nonatomic, readonly) BOOL isConnected;
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithUrl:(NSURL * __nonnull)url OBJC_DESIGNATED_INITIALIZER;
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithUrl:(NSURL * __nonnull)url cookies:(NSArray * __nullable)cookies;
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithUrl:(NSURL * __nonnull)url protocols:(NSArray * __nonnull)protocols;

/// Connect to the websocket server on a background thread
- (void)connect;

/// disconnect from the websocket server
- (void)disconnect;

/// write a string to the websocket. This sends it as a text frame.
- (void)writeString:(NSString * __nonnull)str;

/// write binary data to the websocket. This sends it as a binary frame.
- (void)writeData:(NSData * __nonnull)data;
- (void)writePing:(NSData * __nonnull)data;
- (void)stream:(NSStream * __nonnull)aStream handleEvent:(NSStreamEvent)eventCode;
@end

#pragma clang diagnostic pop
